#!/bin/bash
source "$HOME/ghostAPT/data.lib"
source "$HOME/ghostAPT/interface.lib"
code-goes-below

scriptname="Common Dependencies"
author="The Ghost Team"
version="1.3"

installflatpack (){

# Function to enable Flatpak for Plasma Discover
enable_plasma_flatpak() {
    echo "Enabling Flatpak support for Plasma Discover..."
    sudo apt-get update
    sudo apt-get install -y plasma-discover-backend-flatpak
    flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
    echo "Flatpak support for Plasma Discover is now enabled."
}

# Function to enable Flatpak for GNOME Software
enable_gnome_flatpak() {
    echo "Enabling Flatpak support for GNOME Software..."
    sudo apt-get update
    sudo apt-get install -y gnome-software-plugin-flatpak
    flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
    echo "Flatpak support for GNOME Software is now enabled."
}

# Function to display the menu
show_menu() {
    echo "Choose the software to enable Flatpak support for:"
    echo "1. Plasma Discover"
    echo "2. GNOME Software"
    echo "3. Don't install Flatpak support"
    read -p "Enter your choice (1/2/3): " choice
}

# Main script
while true; do
    show_menu

    case $choice in
        1)
            enable_plasma_flatpak
            break
            ;;
        2)
            enable_gnome_flatpak
            break
            ;;
        3)
            echo "Skipping Flatpak support..."
            break
            ;;
        *)
            echo "Invalid choice. Please enter 1, 2, or 3."
            ;;
    esac
done

}

installappimagelauncher (){

# Function to install AppImageLauncher
install_appimagelauncher() {
    echo "Installing AppImageLauncher..."
    A1=$(curl -sL https://api.github.com/repos/TheAssassin/AppImageLauncher/releases/latest | jq -r ".assets[].browser_download_url" | grep .bionic_amd64.deb)
    A2=$(echo $A1 | awk '{print $1$2$3$4$5$6$7$8}')
    A3=$(echo $A1 | awk -F "/" '{print $9}')
    wget "$A2" -P ~/Downloads/

    # Install the .deb package
    sudo dpkg -i ~/Downloads/"$A3"

    # Handle dependencies if any
    sudo apt-get install -f

    echo "Installation of AppImageLauncher is complete..."
}

# Function to display the menu
show_menu() {
    echo "Do you want to install AppImageLauncher?"
    echo "1. Install AppImageLauncher"
    echo "2. Don't install AppImageLauncher"
    read -p "Enter your choice (1/2): " choice
}

# Main script
while true; do
    show_menu

    case $choice in
        1)
            install_appimagelauncher
            break
            ;;
        2)
            echo "Skipping AppImageLauncher..."
            break
            ;;
        *)
            echo "Invalid choice. Please enter 1 or 2."
            ;;
    esac
done

}

installopenrgb (){

# Function to install openRGB
install_openrgb() {
    echo "Installing openRGB..."
    flatpak install -y --noninteractive flathub "org.openrgb.OpenRGB"
    echo "openRGB has been installed."
}

# Function to enable openRGB now and on startup
enable_openrgb() {
    echo "Enabling openRGB now and on startup..."
    #User autostart OpenRGB
    echo "[Desktop Entry]
Categories=Utility;
Comment=OpenRGB 0.8, for controlling RGB lighting.
Icon=OpenRGB
Name=OpenRGB
StartupNotify=true
Terminal=false
Type=Application
Exec=/usr/bin/openrgb --startminimized --server" | tee $HOME/.config/autostart/OpenRGB.desktop

    #Add cronjob to add blue lights to OpenRGB on startup
    echo "* * * * * root openrgb -d 0 -b 50 -c blue" | sudo tee /etc/cron.d/OpenRGB
    echo "openRGB has been enabled now and on startup."
}

# Function to display the installation menu
show_install_menu() {
    echo "Do you want to install openRGB?"
    echo "1. Yes"
    echo "2. No"
    read -p "Enter your choice (1/2): " choice
}

# Function to display the enable menu
show_enable_menu() {
    echo "Do you want to enable openRGB now and on startup?"
    echo "1. Yes"
    echo "2. No"
    read -p "Enter your choice (1/2): " choice
}

echo "This installer does not yet work. Please do not use this until this banner is gone."

read -p "Press enter to continue..."

# Main script
show_install_menu

case $choice in
    1)
        install_openrgb

        show_enable_menu

        case $choice in
            1)
                enable_openrgb
                break
                ;;
            2)
                echo "openRGB will not be enabled now or on startup."
                break
                ;;
            *)
                echo "Invalid choice. Please enter 1 or 2."
                ;;
        esac
        break
        ;;
    2)
        echo "Skipping openRGB..."
        break
        ;;
    *)
        echo "Invalid choice. Please enter 1 or 2."
        ;;
esac

}

#python3 python3-pip
sudo apt-get update
sudo apt-get install coreutils numlockx konsole nano pciutils jq 7zip xclip xdotool openssh-server flatpak kdialog zenity yad htop neofetch curl wget pv -y

installflatpack

installappimagelauncher

#installopenrgb

code-goes-above-^
