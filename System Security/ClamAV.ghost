#!/bin/bash
source "$HOME/ghostAPT/data.lib"
source "$HOME/ghostAPT/interface.lib"
code-goes-below

scriptname="ClamAV"
author="The Ghost Team"
version="1.4"

# Function to check if ClamAV is installed
check_clamav_installed() {
    if dpkg -l | grep -q "^ii  clamav"; then
        echo "ClamAV is installed."
        CLAMAV_INSTALLED=true
    else
        echo "ClamAV is not installed."
        CLAMAV_INSTALLED=false
    fi
}

# Function to display the main menu
display_menu() {
    echo "

ClamAV Management Menu"
    echo "----------------------"
    if [ "$CLAMAV_INSTALLED" = true ]; then
        echo "1. Update ClamAV virus database"
        echo "2. Create Desktop + Start Menu Shortcuts"
        echo "3. Add $USER to clamav group"
        echo "---------------------- (Scan Only)"
        echo "4. Run a full system scan (CMD)"
        echo "5. Run a scan on a specific directory (CMD)"
        echo "6. Run a scan on a specific directory (GUI)"
        echo "---------------------- (Scan and Remove)"
        echo "7. Run a full system scan and clean detected viruses (CMD)"
        echo "8. Run a scan on a specific directory and clean detected viruses (CMD)"
        echo "9. Run a scan on a specific directory and clean detected viruses (GUI)"
        echo "----------------------"
        echo "10. Uninstall ClamAV"
        echo "11. Exit"
    else
        echo "1. Install ClamAV"
        echo "2. Exit"
    fi
    echo "----------------------"
    read -p "Enter your choice: " choice
}

# Function to update ClamAV virus database
update_clamav_db() {
    sudo freshclam
}

# Function to run a full system scan
run_full_system_scan() {
    sudo sleep 1
    sudo clamscan -r / | pv --line-mode -s $(sudo find "/" -type f | wc -l)
}

# Function to run a full system scan and clean detected viruses
run_full_system_scan_clean() {
    sudo sleep 1
    sudo clamscan -r --remove / | pv --line-mode -s $(sudo find "/" -type f | wc -l) # Remove detected viruses
    # Alternatively, you can use --move to move detected files to a quarantine directory
    # sudo clamscan -r --move=/path/to/quarantine /  # Move detected viruses to a quarantine directory
}

# Function to run a scan on a specific directory
run_directory_scan() {
    read -p "Enter the directory to scan: " directory
    sudo sleep 1
    sudo clamscan -r "$directory" | pv --line-mode -s $(sudo find "$directory" -type f | wc -l)
}

# Function to run a scan on a specific directory and clean detected viruses
run_directory_scan_clean() {
    read -p "Enter the directory to scan and clean: " directory
    sudo sleep 1
    sudo clamscan -r --remove "$directory" | pv --line-mode -s $(sudo find "$directory" -type f | wc -l)  # Remove detected viruses
    # Alternatively, you can use --move to move detected files to a quarantine directory
    # sudo clamscan -r --move=/path/to/quarantine "$directory"  # Move detected viruses to a quarantine directory
}

# Function to run a scan on a specific directory using Zenity
run_directory_scan_gui() {
    directory=$(zenity --file-selection --directory --title="Select Directory to Scan")
    if [ -n "$directory" ]; then
        sudo sleep 1
        sudo clamscan -r "$directory" | pv --line-mode -s $(sudo find "$directory" -type f | wc -l)
    else
        echo "No directory selected."
    fi
}

# Function to run a scan on a specific directory using Zenity and clean detected viruses
run_directory_scan_gui_clean() {
    directory=$(zenity --file-selection --directory --title="Select Directory to Scan and Clean")
    if [ -n "$directory" ]; then
        sudo sleep 1
        sudo clamscan -r --remove "$directory" | pv --line-mode -s $(sudo find "$directory" -type f | wc -l)  # Remove detected viruses
        # Alternatively, you can use --move to move detected files to a quarantine directory
        # sudo clamscan -r --move=/path/to/quarantine "$directory"  # Move detected viruses to a quarantine directory
    else
        echo "No directory selected."
    fi
}

addtoclamavgroup () {
sudo usermod -aG clamav $USER
newgrp clamav

}

createiconsclamav () {

    libraryname="clamav.png"

    remotelibrarylink="https://raw.githubusercontent.com/micahsnyder/clamav-documentation/main/src/images/logo.png"

    sudo curl -o /usr/share/icons/ghostAPT/$libraryname $remotelibrarylink

    echo "#!/usr/bin/env xdg-open
[Desktop Entry]
Version=1.0
Name=ClamAV
GenericName=ClamAV

Exec=bash $HOME/ghostAPT/\"The Ghost Team - System Security\"/ClamAV.ghost
StartupNotify=true
Terminal=true
Icon=/usr/share/icons/ghostAPT/$libraryname
Type=Application
Categories=Utilities;
" | tee $HOME/Desktop/"ClamAV" ; chmod u+x $HOME/Desktop/"ClamAV" ; sudo cp -fv $HOME/Desktop/"ClamAV" /usr/share/applications/"ClamAV.desktop"

echo "Desktop + Start Menu Icons Created."

}

# Function to uninstall ClamAV
uninstall_clamav() {
    sudo apt-get remove --purge clamav -y
    sudo apt-get autoremove -y
    sudo rm -rfv "$HOME/Desktop/ClamAV" "/usr/share/applications/ClamAV.desktop"
    echo "ClamAV has been uninstalled."
    CLAMAV_INSTALLED=false
}

# Function to install ClamAV
install_clamav() {
    sudo apt-get update
    sudo apt-get install clamav pv -y
    createiconsclamav
    echo "ClamAV has been installed."
    CLAMAV_INSTALLED=true
}

# Main script
check_clamav_installed

if [ "$CLAMAV_INSTALLED" == false ]; then
while true; do
    display_menu

    case $choice in
        1)
            if [ "$CLAMAV_INSTALLED" = true ]; then
                update_clamav_db
            else
                install_clamav
            fi
            ;;
        2)
            echo "Exiting..."
            break
            ;;
        *)
            echo "Invalid choice. Please try again."
            ;;
    esac
done
fi

if [ "$CLAMAV_INSTALLED" == true ]; then
while true; do
    display_menu

    case $choice in
        1)
            if [ "$CLAMAV_INSTALLED" = true ]; then
                update_clamav_db
            else
                install_clamav
            fi
            ;;
        2)
            if [ "$CLAMAV_INSTALLED" = true ]; then
                createiconsclamav
            else
                install_clamav
            fi
            ;;
        3)
            if [ "$CLAMAV_INSTALLED" = true ]; then
                addtoclamavgroup
            else
                install_clamav
            fi
            ;;
        4)
            if [ "$CLAMAV_INSTALLED" = true ]; then
                run_full_system_scan
            else
                echo "ClamAV is not installed. Please install ClamAV first."
            fi
            ;;
        5)
            if [ "$CLAMAV_INSTALLED" = true ]; then
                run_directory_scan
            else
                echo "ClamAV is not installed. Please install ClamAV first."
            fi
            ;;
        6)
            if [ "$CLAMAV_INSTALLED" = true ]; then
                run_directory_scan_gui
            else
                echo "ClamAV is not installed. Please install ClamAV first."
            fi
            ;;
        7)
            if [ "$CLAMAV_INSTALLED" = true ]; then
                run_full_system_scan_clean
            else
                echo "ClamAV is not installed. Please install ClamAV first."
            fi
            ;;
        8)
            if [ "$CLAMAV_INSTALLED" = true ]; then
                run_directory_scan_clean
            else
                echo "ClamAV is not installed. Please install ClamAV first."
            fi
            ;;
        9)
            if [ "$CLAMAV_INSTALLED" = true ]; then
                run_directory_scan_gui_clean
            else
                echo "ClamAV is not installed. Please install ClamAV first."
            fi
            ;;
        10)
            if [ "$CLAMAV_INSTALLED" = true ]; then
                uninstall_clamav
            else
                echo "ClamAV is not installed."
            fi
            ;;
        11)
            echo "Exiting..."
            break
            ;;
        *)
            echo "Invalid choice. Please try again."
            ;;
    esac
done
fi

code-goes-above-^
